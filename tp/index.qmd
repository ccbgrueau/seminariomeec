---
title: "Criar mapas para a Web com `quarto {ojs}` e `geoviz`"
format:
  html:
    theme: journal
    toc: true
    number-sections: true
    number-depth: 2
editor: visual
lang: pt
---

O objetivo desta sess√£o √© introduzir o participante √† cria√ß√£o de mapas interativos utilizando o **Quarto** e a biblioteca JavaScript **geoviz**.

# Introdu√ß√£o

Antes de come√ßar, por favor, certifique-se que leu a apresenta√ß√£o de introdu√ß√£o √† Web, √† sua hist√≥ria, √†s suas linguagens e ao Observable JavaScript. Ela √© um pr√©-requisito para compreender o que vem a seguir.

# Introdu√ß√£o a Quarto

## Ambiente de software.

Este tutorial utiliza o software [Quarto](https://quarto.org). Para o instalar, pode usar o link seguinte:

<https://quarto.org/docs/get-started>

A seguir, precisa de um ambiente de desenvolvimento para escrever o c√≥digo e ver os resultados. Tem v√°rias escolhas poss√≠veis:

![](img/ide.png)

Nesta sess√£o, vamos usar o RStudio, um IDE mais focado para a linguagem R mas que integra de forma muito eficiente a cria√ß√£o de notebooks com Quarto onde se pode integrar listagens de c√≥digo JavaScript.

## Criar um documento Quarto

-   No seu computador, crie uma pasta `TP_geoviz` num local √† sua escolha.
-   Abra o RStudio
-   Crie um documento `Quarto (ficheiro > Novo ficheiro > Documento Quarto`\`

![](img/quarto-new-project.png)

-   Clique em "Criar documento vazio" no canto inferior esquerdo.
-   Mude para o modo de c√≥digo fonte (\`Source\`).

![](img/quarto-new.png)

Ir√° obter um ficheiro com as seguintes linhas:

``` yaml
---
title: "Untitled"
format: html
editor: visual
---
```

A informa√ß√£o delimitada pelos simbolos \`---\` correspondem a especifica√ß√£o **yaml** do ficheiro, uma linguagem de configura√ß√£o.

Selecionar um t√≠tulo Guardar o ficheiro **index.qmd** na pasta **TP_geoviz**. Nesta pasta, pode criar tamb√©m uma subdiretoria de **dados** para armazenar os dados.

![](img/quarto-project-structure.png)

## Resumo das bases

Neste tutorial, vamos criar mapas utilizando **Observable JavaScript** (ou ***ojs***). Lembre-se que ***ojs*** √© um conjunto de melhorias feitas no JavaScript com o objetivo de torn√°-lo uma linguagem dedicada √† visualiza√ß√£o de dados para a web. Essa linguagem est√° totalmente integrada em **Quarto**.

As caracter√≠sticas do ***ojs*** s√£o as seguintes:

-   √â JavaScript + bibliotecas pr√©-carregadas como Plot & d3js üìä
-   Tudo √© reativo üî• e reproduzido em tempo real
-   A ordem das c√©lulas n√£o importa ü§Ø
-   Cada in√≠cio de linha identifica uma c√©lula ***ojs***. O nome destas c√©lulas deve ser √∫nico para todo o documento.

Em Quarto, todas as instru√ß√µes a seguir s√£o escritas em peda√ßos de ojs

\`\`\`{ojs}

\`\`\`

::: callout-caution
## Cuidado

Os *chunks* e as c√©lulas s√£o dois conceitos diferentes.
:::

Um *chunk* que cont√©m uma √∫nica c√©lula

``` shell
sum = 10 + 10
```

Um *chunk* que cont√©m tr√™s c√©lulas

``` shell
a = 10
b = 20
c = a * b
```

Um *chunk* que cont√©m uma √∫nica c√©lula

``` shell
{
  // c√≥digo JavaScript
  let a = 10
  let b = 20
  return a * b
}
```

Para cada bloco, pode utilizar `echo` para definir se pretende ou n√£o que o c√≥digo seja apresentado no seu bloco de notas final. Com `eval`, pode escolher se o c√≥digo deve ou n√£o ser executado.

\`\`\`{ojs}

/ / \| echo: false

/ / \| eval: true

\`\`\`

O c√≥digo em linha tamb√©m permite a execu√ß√£o de c√≥digo dentro do texto no formato *markdown*. A sintaxe do c√≥digo em linha √© semelhante √† dos blocos de c√≥digo, exceto que √© utilizado um √∫nico tra√ßo (\`) em vez de tr√™s tra√ßos (\`\`\`).

``` html
raio = 5
```

``` md
O raio da circunfer√™ncia √© igual a **``{ojs} radius``**.
```

resulta nisto :

```         
O raio do c√≠rculo √© igual a 5
```

Para gerar o documento, clique no bot√£o *Renderizar* ou utilize o atalho de teclado **Ctrl+Shift+K**.

Depois de ter clicado em \*Renderizar\*, a p√°gina Web √© apresentada no painel Visualizador e √© criada uma pasta **Docs**. Ela cont√©m o site gerado.

Tamb√©m pode clicar no √≠cone *Ver numa nova janela* para ver o documento no seu navegador Web habitual.

![](img/webview.png){fig-align="center"}

## Documenta√ß√£o e exemplos

Ao longo deste caderno, pode consultar a documenta√ß√£o clicando neste √≠cone.

![](img/icone-doc.png)

Tamb√©m pode aceder a exemplos pedag√≥gicos e demonstra√ß√µes online clicando neste √≠cone.

![](img/icone-ojs.png)

# Os dados

O conjunto de dados utilizado prov√©m do [Banco Mundial](https://data.worldbank.org/indicator). Os dados foram formatados [aqui](https://observablehq.com/@neocartocnrs/world-bank-data).

Descarregue os dados e coloque o ficheiro zip no seu diret√≥rio de dados.

![](img/icon-download.png){width="50"}

## **Importa√ß√£o dos dados**

Em {ojs}, importamos os dados com a instru√ß√£o `FileAttachment()`[![](img/icone-doc.png)](https://github.com/observablehq/stdlib#file-attachments)

Uma vez que os dados est√£o no formato .zip, escrevemos :

```{ojs}
worldbank = FileAttachment("data/worldbank.zip").zip()
```

Este ficheiro zip cont√©m 3 ficheiros.

```{ojs}
worldbank.filenames
```

Existem v√°rias fun√ß√µes dispon√≠veis para interpretar formatos de dados. A fun√ß√£o `.csv()` √© utilizada para importar dados ***csv***. A fun√ß√£o `.xlsx()` √© utilizada para importar ***folhas de c√°lculo Excel***. A fun√ß√£o `.json()` √© utilizada para importar dados em formato ***JSO***N. Aqui, vamos criar 3 conjuntos de dados distintos.

-   Os dados

```{ojs}
data = worldbank.file("data.csv").csv()
```

-   Os metadados

```{ojs}
metadata = worldbank.file("metadata.csv").csv()
```

-   As bases dos mapas (pa√≠ses do mundo)

```{ojs}
world = worldbank.file("world.json").json()
```

## Visualiza√ß√£o de dados de atributos

Para visualizar uma tabela de dados, pode utilizar a instru√ß√£o `Inputs.table()`.

```{ojs}
Inputs.table(data)
```

```{ojs}
Inputs.table(metadata)
```

Esta visualiza√ß√£o de tabela tamb√©m pode ser combinada com a fun√ß√£o `Inputs.search()`.

```{ojs}
viewof search = Inputs.search(data, { query: "Portugal" })
Inputs.table(search)
```

::: {.callout-tip collapse="true"}
√â poss√≠vel combinar instru√ß√µes em ***R*** e instru√ß√µes em ***ojs*** utilizando a instru√ß√£o `ojs_define()`.

Por exemplo :

``` r
# chunk r
datafromr <- read.csv("data/data.csv")
ojs_define(ojsdata = datafromr)
```

``` javascript
// chunk ojs
Inputs.table(transpose(ojsdata))
```

Tamb√©m funciona com objectos espaciais. Mas para isso, √© preciso fazer as coisas de forma um pouco diferente.

``` r
# chunk r
library("sf")
library("geojsonsf")
geomfromr <- st_read("data/world.gpkg")
ojs_define(ojsgeom = sf_geojson(geomfromr))
```

``` ojs
// chunk ojs
JSON.parse(ojsgeom)
```
:::

## Visualizar Geometrias

O mapa de fundo est√° no formato geoJSON

Para o visualizar, √© necess√°rio importar uma biblioteca de mapas. Neste caso, escolhemos a biblioteca geoviz

[![](img/geoviz.jpeg){width="300"}](https://riatelab.github.io/geoviz/)

√â importada utilizando a instru√ß√£o `require()`.

```{ojs}
viz = require("geoviz@0.6.1")
```

Para ver simplesmente as geometrias com uma cor aleat√≥ria, digite :

```{ojs}
viz.path({data: world})
```

O mapa √© um pouco grande. Podemos redimension√°-lo utilizando o par√¢metro `svg_width`.

```{ojs}
viz.path({data: world, svg_width: 790})
```

::: callout-note
## Cuidado

O atributo `svg_width` modifica os par√¢metros do contentor SVG que cont√©m a camada. Veremos mais tarde como funcionam os contentores.
:::

## Personalizar a visualiza√ß√£o

A biblioteca ***geoviz*** n√£o √© apenas um visualizador de camadas SIG. √â uma ferramenta para criar mapas vectoriais. Com o geoviz, os mapas s√£o desenhados em formato SVG. Por conseguinte, √© poss√≠vel utilizar todos os atributos SVG para modificar o mapa. H√° apenas uma diferen√ßa. O JavaScript n√£o suporta nomes de vari√°veis com h√≠fen. Por isso, √© habitual converter este h√≠fen em camelCase. Por exemplo: `stroke-width` dar√° `strokeWidth`.

Pode tentar :

-   `fill`: cor de fundo
-   `stroke`: cor do contorno
-   `strokeWidth`: espessura da linha
-   `fillOpacity`: opacidade do fundo
-   `strokeOpacity`: opacidade do contorno
-   `strokeDashArray`: linhas pontilhadas (por exemplo, \[2,3\])

Em suma, pode personalizar tudo tal como num mapa do ***Inkscape*** ou do *`Illustrator`*.

```{ojs}
viz.path({data: world, svg_width: 790, fill: "#d66bb3", strokeWidth:0.5})
```

Lembre-se que, com o Observable, estamos num ambiente interativo e reativo. Assim, podemos criar interac√ß√µes para personalizar o mapa.

```{ojs}
viewof colorfill = Inputs.color({label: "Fond", value: "#4682b4"})
viewof colorstroke = Inputs.select(["red", "green", "blue"], {label: "Contour"})
viewof thickness = Inputs.range([0, 10], {step: 0.1, label: "Epaisseur", value:1})
```

```{ojs}
viz.path({data: world, svg_width:790, fill: colorfill, stroke: colorstroke, strokeWidth: thickness})
```

# A biblioteca geoviz

## Documenta√ß√£o e exemplos

A documenta√ß√£o do `geoviz` est√° dispon√≠vel no seguinte endere√ßo: [riatelab.github.io/geoviz](https://riatelab.github.io/geoviz/). Clique nesta hiperliga√ß√£o e guarde a p√°gina para refer√™ncia futura.

[![](img/geoviz2.png)](https://riatelab.github.io/geoviz/)

Para o ajudar a compreender o funcionamento desta biblioteca, est√£o tamb√©m dispon√≠veis v√°rios exemplos em direto na plataforma do bloco de notas Observable.

Hello geoviz

Map container

Path mark

Circle mark

Half-circle mark

Spike mark

Square mark

Prop symbols

Text mark

Tile mark

Choropleth

Typolgy

Tooltip

Legends

SVG filters and clip

Insets

Layout marks

Pan and zoom

Interactivity

Handle geometries

Draw function

## **Os `marks`**

√Ä semelhan√ßa da instru√ß√£o `path`, a biblioteca ***geoviz*** fornece uma s√©rie de **`marks`** para criar um mapa.

Por exemplo :

-   `circle` : c√≠culos

-   `square` : quadrados \[

-   `halfcircle` : meios c√≠rculos

-   `spike` : pontas

-   `graticule` : linhas de latitude e longitude

-   `outline` : espa√ßo terrestre numa determinada proje√ß√£o

-   `tile` : mosaicos raster

-   `header` :t√≠tulo do mapa

-   `footer` : rodap√© (fontes)

-   `north`: seta do norte

-   `scalebar` : barra de escala

-   `text` : textos et r√≥tulos

√â poss√≠vel chamar diretamente estes `marks`.

```{ojs}
viz.circle({ r: 40, fill: "#38896F" })
```

```{ojs}
viz.square({ side: 60, fill: "#38896F", angle: 45 })
```

Se utilizarmos o atributo de dados, as marcas s√£o colocadas no centro das unidades geogr√°ficas. Por exemplo

```{ojs}
viz.square({ data: world, svg_width: 790, side: 6, fill: "#38896F", angle: 45 })
```

```{ojs}
viz.text({ data: world, svg_width: 785, text: "ISO3", fill: "#38896F" })
```

Mas, na maioria das vezes, estas marcas ser√£o utilizadas dentro de contentores nos quais podem ser sobrepostas.

## Os Contentores

No geoviz, para combinar diferentes camadas num mapa, √© necess√°rio criar um contentor SVG. Este contentor √© criado utilizando a instru√ß√£o `create()`. Pode ent√£o ser apresentado utilizando a fun√ß√£o `render()`.

::: callout-tip
## Dica

Para criar o mapa numa √∫nica c√©lula, coloque as instru√ß√µes entre chavetas
:::

```{ojs}
{
let svg = viz.create()
svg.path({data:world})
return svg.render()
}
```

Para funcionar corretamente, o contentor necessita que defina uma proje√ß√£o e/ou um dom√≠nio.

::: callout-note
Note que, a partir de agora, a fun√ß√£o create() ser√° utilizada para definir o tamanho do mapa.
:::

Vamos recome√ßar:

```{ojs}
{
  let svg = viz.create({domain: world, width: 790})
  svg.path({data:world, fill :"#38896F"})
  return svg.render()
}
```

## As proje√ß√µes

No ecossistema d3js e geoviz, utilizamos fun√ß√µes de proje√ß√£o muito espec√≠ficas dedicadas √† representa√ß√£o de dados, divididas em 3 bibliotecas: d3-geo , d3-geo-projection e d3-geo-polygon .

S√£o carregados da seguinte forma:

```{ojs}
d3 = require("d3", "d3-geo", "d3-geo-projection", "d3-geo-polygon")
```

O princ√≠pio √© que a entrada √© sempre uma geometria em formato lat/lon, que √© projetada em tempo real quando √© apresentada.

Por exemplo :

```{ojs}
{
  let svg = viz.create({domain: world, width: 790, projection: d3.geoNaturalEarth1()})
  svg.path({data:world, fill :"#38896F"})
  return svg.render()
}
```

::: callout-note
Note que tamb√©m poderia ter escrito simplesmente :

``` javascript
viz.path({data:world, fill :"#38896F", svg_width: 790, svg_projection: d3.geoNaturalEarth1()})
```
:::

Com os contentores, pode-se agora empilhar camadas. Ao combinar marcas e atributos SVG, pode-se criar modelos cartogr√°ficos muito bonitos.

```{ojs}
{
  let svg = viz.create({width: 790, projection: d3.geoAitoff() })
  svg.outline()
  svg.graticule({stroke: "white", step: 40})
  svg.path({datum:world, fill :"white", fillOpacity:0.3})
  svg.header({text: "Hello World"})
  return svg.render()
}
```

Gra√ßas aos Inputs, pode divertir-se a visualizar diferentes projec√ß√µes.

```{ojs}
projections = [
  { name: "Interrupted Sinusoidal", proj: d3.geoInterruptedSinusoidal() },
  { name: "Gingery", proj: d3.geoGingery() },
  { name: "Baker", proj: d3.geoBaker() },
  { name: "PolyhedralWaterman", proj: d3.geoPolyhedralWaterman()  },     
]
```

```{ojs}
viewof projection = Inputs.select(projections, {
  label: "Projection",
  format: (x) => x.name
})
```

```{ojs}
{
  let svg = viz.create({width: 790, projection: projection.proj})
  svg.graticule({stroke :"#38896F", strokeWidth: 1.5, strokeDasharray:null, step:40, clipPath : svg.effect.clipPath()})
  svg.path({datum:world, fill :"#38896F"})
  svg.outline({stroke :"#38896F", fill:"none", strokeWidth: 2})
  return svg.render()
}
```

## Zoom e Pan

No contentor, utilizando o atributo `zoomable`, pode-se tamb√©m especificar se se pretende que o mapa seja pass√≠vel de zoom.

Por exemplo, o atributo :

```{ojs}
{
  let svg = viz.create({width: 790, projection: d3.geoBertin1953(), zoomable:true })
  svg.outline()
  svg.graticule({stroke: "white"})
  svg.path({datum:world, fill :"white", fillOpacity:0.3})
  return svg.render()
}
```

Com uma proje√ß√£o ortogr√°fica e o atributo `outzoomable = ‚Äúversor‚Äù`, pode-se tamb√©m utilizar o centro de proje√ß√£o para rodar o globo.

```{ojs}
{
  let svg = viz.create({width: 790, projection: d3.geoOrthographic().rotate([-30, -30]), zoomable:"versor" })
  svg.outline()
  svg.graticule({stroke: "white"})
  svg.path({datum:world, fill :"white", fillOpacity:0.3})
  return svg.render()
}
```

Note que o `versor` pode ser aplicado a qualquer proje√ß√£o, o que pode ser confuso, mas tamb√©m √© muito √∫til se quiser realmente compreender como funcionam as projec√ß√µes cartogr√°ficas.

```{ojs}
{
  let svg = viz.create({width: 790, projection: d3.geoEckert3(), zoomable:"versor" })
  svg.outline()
  svg.graticule({stroke: "white"})
  svg.path({datum:world, fill :"white", fillOpacity:0.3})
  return svg.render()
}
```

## Grelhas raster

Tal como as outras marcas, as grelhas raster s√£o igualmente pass√≠veis de zoom.

Os estilos dispon√≠veis por defeito s√£o : ‚Äúopenstreetmap‚Äù, ‚Äúopentopomap‚Äù, ‚Äúworldterrain‚Äù, ‚Äúworldimagery‚Äù, ‚ÄúworldStreet‚Äù, ‚Äúworldphysical‚Äù, ‚Äúshadedrelief‚Äù, ‚Äústamenterrain‚Äù, ‚Äúcartodbvoyager‚Äù, ‚Äústamentoner‚Äù, ‚Äústamentonerbackground‚Äù, ‚Äústamentonerlite‚Äù, ‚Äústamenwatercolor‚Äù, ‚Äúhillshade‚Äù, ‚Äúworldocean‚Äù, ‚Äúnatgeo‚Äù e ‚Äúworldterrain‚Äù

::: callout-caution
Para utilizar o *mark* `tile`, √© necess√°rio utilizar a proje√ß√£o ‚Äúmercator‚Äù.
:::

```{ojs}
{
  let svg = viz.create({width: 790, projection: "mercator", zoomable:true })
  svg.tile({url:"natgeo"})
  svg.path({datum:world, fill :"none", stroke:"white"})
  return svg.render()
}
```

## As bolhas de informa√ß√£o

Com o geoviz, pode adicionar bolhas de informa√ß√£o a qualquer objeto. Se utilizar `tip: true`, todos os campos s√£o apresentados.

```{ojs}
{
  let svg = viz.create({width: 790, projection: d3.geoNaturalEarth1()})
  svg.path({data:world, fill :"#38896F", stroke:"white", strokeWidth:0.3, tip:true})
  return svg.render()
}
```

Mas tudo pode ser personalizado:

```{ojs}
{
  let svg = viz.create({width: 790, projection: d3.geoNaturalEarth1()})
  svg.path({data:world, fill :"#38896F", stroke:"white", strokeWidth:0.3, tip: `Este pa√≠s √© $NAMEfr e o seu c√≥digo √© : $ISO3`})
  return svg.render()
}
```

# Cartografia estat√≠stica

## A jun√ß√£o

A primeira coisa a fazer aqui √© realizar uma jun√ß√£o entre as geometrias e os dados estat√≠sticos importados no in√≠cio deste caderno a partir de um ficheiro zip.

Vejamos novamente a tabela de dados.

```{ojs}
Inputs.table(data)
```

A tabela cont√©m informa√ß√µes para v√°rias datas. Por conseguinte, o mesmo identificador (`id`) aparece v√°rias vezes na tabela de dados. O primeiro passo √© selecionar um ano.

Em JavaScript, utilizamos a instru√ß√£o de filtro.

```{ojs}
data2020 = data.filter(d => d.year == 2020)
Inputs.table(data2020)
```

::: callout-tip
Manipular uma matriz de dados em JavaScript quando se est√° habituado a faz√™-lo em R pode ser confuso. Mas √© poss√≠vel usar a biblioteca arquero, que √© muito semelhante ao `dplyr`.
:::

Para efetuar a jun√ß√£o, utilizamos a instru√ß√£o `viz.tool.merge()`.

```{ojs}
jointure = viz.tool.merge({geom: world, geom_id: "ISO3", data: data2020, data_id:"id"})
```

A fun√ß√£o devolve o resultado da jun√ß√£o, bem como um diagn√≥stico para avaliar a qualidade da jun√ß√£o.

```{ojs}
jointure 
```

O novo mapa de fundo √©, por conseguinte, :

```{ojs}
world2020 = jointure.featureCollection
```

## Os S√≠mbolos proporcionais

Para representar dados quantitativos absolutos, utilizamos s√≠mbolos na cartografia que variam proporcionalmente. Para o fazer, utilize a fun√ß√£o `viz.plot()` com `type: ‚Äúprop‚Äù` . √â um pouco como usar `r::mapsf`.

O mapa pode ser desenhado da seguinte forma :

```{ojs}
{
let svg = viz.create({width: 790, domain: world2020})
svg.plot({type: "base", data: world2020, fill: "#CCC"})
svg.plot({type: "prop", data: world2020, var: "pop", fill:"#d47988", leg_pos:[10, 200]})
return svg.render()
} 
```

5.3. Tipologias Para criar tipologias, utilizamos tamb√©m a fun√ß√£o `plot()` com `type: "typo"`.

```{ojs}
{
let svg = viz.create({width: 790, domain: world2020})
svg.plot({type: "typo", data: world2020, var: "region", leg_pos:[10, 100]})
return svg.render()
} 
```

Est√£o dispon√≠veis v√°rias paletas de cores em dicopal.

## Mapa coropl√©tico

Para criar um mapa coropl√©tico, utilize o comando `type: "choro"`

```{ojs}
{
let svg = viz.create({width: 790, domain: world2020})
svg.plot({type: "choro", data: world2020, var: "gdppc", leg_pos:[10, 100]})
return svg.render()
}
```

Com `method`, pode alterar o m√©todo de discretiza√ß√£o: ‚Äúquantile‚Äù, ‚Äúq6‚Äù, ‚Äúequal‚Äù, ‚Äújenks‚Äù, ‚Äúmsd‚Äù, ‚Äúgeometric‚Äù, ‚Äúheadtail‚Äù, ‚Äúpretty‚Äù, ‚Äúarithmetic‚Äù ou ‚Äúnestedmeans‚Äù.

Com `nb`, pode alterar o n√∫mero de classes.

Utilize `colors` para alterar a paleta.

## Combina√ß√µes

Com os tipos ‚Äúpropchoro‚Äù e ‚Äúproptypo‚Äù, √© poss√≠vel criar combina√ß√µes gr√°ficas.

```{ojs}
{
let svg = viz.create({width: 790, domain: world2020})
svg.plot({type: "propchoro", data: world2020, var1: "pop", var2: "gdppc"})
return svg.render()
}
```

## Tudo √© personaliz√°vel/configur√°vel

Lembre-se tamb√©m que estamos num ambiente reativo e que pode propor interac√ß√µes para modificar o mapa.

Por exemplo, √© poss√≠vel

```{ojs}
viewof title = Inputs.textarea({label: "T√≠tulo do mapa", placeholder: "T√≠tulo..."})
viewof k = Inputs.range([10, 70], {step: 1, label: "Raio do maior c√≠crculo"})
viewof toggle = Inputs.toggle({label: "Afastar os c√≠rculos ?", value: false})
```

```{ojs}
{
let svg = viz.create({width:790, domain: world2020})
svg.path({datum: world2020, fill:"#CCC"})
svg.plot({type:"prop", data: world2020, var: "pop", k:k, fill:"#e02d51", dodge: toggle, leg_pos:[10, 200] })
svg.header({text: title })
return svg.render()
}
```

Tudo √© completamente personaliz√°vel.

```{ojs}
{
  let svg = viz.create({ projection: d3.geoOrthographic().rotate([-50,-50]), zoomable: "versor", width:790 });
  svg.plot({ type: "outline", fill: svg.effect.radialGradient() });
  svg.plot({
    type: "graticule",
    stroke: "white",
    step: 40,
    strokeWidth: 2,
    strokeOpacity: 0.3
  });
  svg.plot({ type: "typo", data: world2020, var: "region", stroke: "none", legend: false });
  svg.plot({
    type: "prop",
    symbol: "square",
    data: world2020,
    var: "pop",
    fill: "red",
    fillOpacity:0.8,
    leg_type: "nested",
    leg_values_factor: 1 / 1000000,
    leg_pos: [20, 20],
    leg_frame:true,
    leg_title: "N√∫mero de habitantes",
    leg_subtitle: "(em mili√µes)",
    tip: `$name ($ISO3)`,
    tipstyle: {
    fontSize: 20,
    fill: "white",
    background: "#38896F",
  }
  });
  return svg.render();
}
```

# Criar um mapa animado

Importamos um widget da plataforma do bloco de notas Observable.

```{ojs}
import {Scrubber} from "@mbostock/scrubber"
```

A seguir, criamos o mapa

```{ojs}
viewof anos = Scrubber(d3.range(1960,2023), {autoplay: false})
// Tri des donn√©es
mydata = data.filter(d => d.year == anos)
mybasemap = viz.tool.merge({geom: world, geom_id: "ISO3", data: mydata, data_id:"id"}).featureCollection
// Carte
{
  let svg = viz.create({width:790, projection: d3.geoBertin1953()})
  svg.outline()
  svg.graticule({stroke: "white", step: 40})
  svg.path({datum: world, fill:"white", fillOpacity:0.3})
  svg.header({text: `Popula√ß√£o em ${anos}`})
  svg.plot({type:"prop", data: mybasemap,  var: "pop", fill:"red", fixmax: 1417173173, tip:`$name\n$pop`})
  return svg.render()
}
```

# Ir mais longe

## Dashboards

Desde a vers√£o 1.4, Quarto oferece layouts de p√°gina no estilo dashboard. Tudo o que vimos acima pode, portanto, ser facilmente usado para criar uma aplica√ß√£o completa. Alguns exemplos est√£o dispon√≠veis no site da Quarto.

1.  Documenta√ß√£o Quarto : quarto.org/docs/dashboards

## **Exemplos de mapas realizados com `geoviz`**

-   [Night and Day](https://observablehq.com/@neocartocnrs/night-and-day "Night and Day by Observable")

-   [Charging points in Paris](https://observablehq.com/@neocartocnrs/charging-points-for-electric-vehicles-in-paris "Charging points in Paris by Observable")

-   [Electricity map \[FR\]](https://observablehq.com/@neocartocnrs/electricity-map "Electricity map [FR] by Observable")

-   [OQT & expulsions \[FR\]](https://observablehq.com/@neocartocnrs/migreurop-explusions-et-oqt "OQT & expulsions [FR] by Observable")

-   [Regular grids](https://observablehq.com/@neocartocnrs/bees "Regular grids by Observable")

-   [International migration \[FR\]](https://observablehq.com/@neocartocnrs/migrexplorer "International migration [FR] by Observable")
