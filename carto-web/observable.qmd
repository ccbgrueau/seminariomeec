---
title: "Introdu√ß√£o a cartografia para a Web com o quarto "
format:
  html:
    theme: journal
    toc: true
    number-sections: true
    number-depth: 2
# format:
#   clean-revealjs: 
#     slide-number: true
#     #smaller: true
#     scrollable: true
#     chalkboard: 
#       buttons: true
#     footer: <MEEC 2023-24>
# author:
#   - name: C√©dric Grueau
#     orcid: 0000-0003-3445-4070
#     email: cedric.grueau@estsetubal.ips.pt
#     affiliations: Escola Superior de Tecnologia de Set√∫bal
# date: last-modified
lang: pt
editor: 
  markdown: 
    wrap: sentence
---


# A Web üï∏Ô∏è {background-color="#40666e"}

## Internet e WWW

A Internet nasceu de uma iniciativa militar americana.
O primeiro n√≥ da rede ARPANET (Advanced Research Project Agency Network), que deu origem √† Internet, foi criado em 1969.

![](img/arpanet.webp)

12 de mar√ßo de 1989 : primeira vers√£o da Web - Tim Berners-Lee, um investigador brit√¢nico do CERN, inventou a WWW.

![](img/berneers-lee.jpeg)

O projeto, inicialmente designado por "World Wide Web", foi concebido e desenvolvido para que os cientistas que trabalham em universidades e institutos de todo o mundo pudessem trocar informa√ß√µes instantaneamente.

![](img/www.png)

::: callout-tip
## Web ou Internet ?

A Internet √© uma plataforma de envio de informa√ß√µes de um computador para outro.
A Web, por seu lado, √© um meio de visitar p√°ginas de s√≠tios a partir de navegadores atrav√©s de computadores, tablets ou smartphones.
:::

1991 - A Web √© aberta a todos.

Em 1993, a tecnologia torna-se p√∫blica.
A utiliza√ß√£o da Web explodiu rapidamente na Internet.

No final de 1994, o n√∫mero de servidores Web atingiu os 10.000!

O lan√ßamento do Netscape, o primeiro navegador verdadeiramente comercializado em massa, tamb√©m desempenhou um papel importante na sua democratiza√ß√£o.

![Netscape](img/netscape.webp)

janeiro de 1994: Yahoo!

O n√∫mero de sites estava a explodir, ao ponto de se tornar muito dif√≠cil para os utilizadores novatos da Internet orientarem-se.
Dois estudantes de Stanford, Jerry Yang e David Filo, decidiram criar um gigantesco diret√≥rio de s√≠tios, classificados por temas.
Rapidamente se tornou o portal n√∫mero 1 da Web.

![](img/yahoo.webp)

1998 O Google lan√ßa o seu motor de pesquisa

![](img/google.webp)

2010: o surgimento do HTML5, o futuro da Web

![](img/html5.png)

25 anos ap√≥s a sua inven√ß√£o, o HTML est√° a sofrer uma ligeira revolu√ß√£o, ainda sob o impulso de Tim Berners-Lee.
Gra√ßas √† quinta vers√£o da norma de marca√ß√£o de p√°ginas Web - e a uma s√©rie de tecnologias associadas - est√£o a surgir novos servi√ßos.
O objetivo desta norma √© transformar as p√°ginas Web, ainda demasiado est√°ticas, em verdadeiros programas inform√°ticos, que n√£o estariam √† altura das aplica√ß√µes dos smartphones ou dos programas que instala no seu computador.
E fazer do navegador a √∫nica aplica√ß√£o de que necessitar√°.

Atualmente

Mais de 4 mil milh√µes de utilizadores

![](img/4billions.jpeg)

## Linguagens para a Web

Por detr√°s da Web, existem linguagens inform√°ticas que s√£o interpretadas diretamente nos navegadores.

![](img/html-css-js.png)

### HTML

A HyperText Markup Language, geralmente abreviada HTML, √© o esqueleto de uma p√°gina Web.
√â a estrutura do documento.
O HTML √© estruturado atrav√©s de etiquetas.

``` html
<!DOCTYPE html>
<html>
<head>
<title>Page Title</title>
</head>
<body>

<h1>This is a Heading</h1>
<p>This is a paragraph.</p>

</body>
</html>
```

### CSS

As folhas de estilo em cascata (CSS) s√£o uma linguagem inform√°tica que descreve a apresenta√ß√£o de documentos HTML.
As CSS definem o estilo e o posicionamento dos elementos na p√°gina.

``` css
body {
  background-color: lightblue;
}

h1 {
  color: white;
  text-align: center;
}

p {
  font-family: verdana;
  font-size: 20px;
}
```

### Canvas

Desde o HTML5, √© poss√≠vel desenhar diretamente no navegador Web.
Com o Canvas em modo raster (pix√©is)

Este c√≥digo

``` html
<canvas id="myCanvas2" width="100" height ="100" style="border:1px
solid #000000; background-color: steelblue;"></canvas>
```

resulta em :

```{=html}
<canvas id="myCanvas2" width="100" height ="100" style="border:1px
solid #000000; background-color: steelblue;"></canvas>
```
### SVG

SVG (Scalable Vetor Graphics) √© um formato de dados concebido para descrever conjuntos de gr√°ficos vectoriais.
√â o formato utilizado no Inkscape.

Este c√≥digo::

``` html
<svg viewBox="0 0 1000 100" xmlns="http://www.w3.org/2000/svg">
  <rect x="0" y="0" width="100px" height="100px" fill="#F2CD3B" stroke="#06000C" />
</svg>
```

resulta nisso :

```{=html}
<svg viewBox="0 0 1000 100" xmlns="http://www.w3.org/2000/svg">
  <rect x="0" y="0" width="100px" height="100px" fill="#F2CD3B" stroke="#06000C" />
</svg>
```
::: callout-note
As coordenadas \[0,0\] est√£o no canto superior esquerdo.
:::

![](img/reference-system.png)

### JavaScript

Esta √© a linguagem de script do browser.

![](img/js.png)

## JavaScript

O JavaScript √© uma linguagem de programa√ß√£o com quase 30 anos.

### 1995

![](img/js.png){width="15%"}

A linguagem Javascript foi criada em dez dias, em maio de 1995, por Brendan Eich, para a Netscape Communications Corporation.
Inicialmente, a ideia era construir uma pequena linguagem para intera√ß√£o em p√°ginas Web.
Note-se que Javascript n√£o √© JAVA!

### 1997

![](img/ecma.png)

A linguagem Javascript √© normalizada desde 1997 pela comiss√£o TC39 da ECMA International.

### 2008

Os navegadores Web t√™m vindo a trabalhar em novos motores para melhorar o desempenho.
O **V8** √© um motor JavaScript de c√≥digo aberto desenvolvido pelo projeto Chromium para os navegadores Web Google Chrome e Chromium (√∫ltima vers√£o em 31 de janeiro de 2022).
Existe tamb√©m o **SpiderMonkey** para o Firefox, o **Chakra** para o Microsoft Edge e o **JavaScriptCore** para o Safari.

### 2009

![](img/node.png)

Cria√ß√£o do Node.js por **Ryan Dahl**, que permite a utiliza√ß√£o do JavaScript como linguagem de programa√ß√£o back-end.

### 2015

Desde 2015 (ES6 ou ES2015), a linguagem JavaScript amadureceu.
Tem um bom desempenho.
E √© implementada de forma harmonizada em todos os browsers.
Estamos a falar de *JavaScript moderno*

### Amanh√£?

Todos os anos s√£o adicionadas novas funcionalidades √† linguagem.

Ver : observablehq.com/@robertbatty/ecmascript-2015-2022

### Uma grande comunidade

::: columns
::: {.column width="50%"}
![](img/programming-languages.png)
:::

::: {.column width="50%"}
![](img/npm-packages.png)Right column
:::
:::

O JavaScript √© uma linguagem antiga com uma comunidade muito grande.

O JavaScript √© atualmente uma das linguagens mais utilizadas pelos programadores de computadores.

Existem atualmente mais de 2 milh√µes de pacotes dispon√≠veis no npm.

JavaScript permite-lhe desenhar no browser

``` javascript
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, 500, 60])
    .style("background-color", "#CCC");
    
  svg
    .append("circle")
    .attr("cx", 50)
    .attr("cy", 30)
    .attr("r", 25)
    .style("fill", "#e04a28");
    
  return svg.node();
}
```

```{ojs}
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, 500, 60])
    .style("background-color", "#CCC");
    
  svg
    .append("circle")
    .attr("cx", 50)
    .attr("cy", 30)
    .attr("r", 25)
    .style("fill", "#e04a28");
    
  return svg.node();
}
```

JavaScript n√£o foi concebido para a an√°lise de dados.
Por exemplo, a opera√ß√£o de ordena√ß√£o predefinida ordena os valores por ordem alfab√©tica.

``` javascript
{ let a = [7,1,9,3,10,4,5,6,2,8]
return a.sort()
}
```

```{ojs}
{ let a = [7,1,9,3,10,4,5,6,2,8]
return a.sort()
}
```

### Mas incontorn√°vel e promissora

-   √â a linguagem da Web
-   Grande comunidade
-   Linguagem cada vez mais poderosa
-   J√° existem muitas bibliotecas

Por isso, algumas pessoas pensam que o JavaScript √© a linguagem do futuro para o processamento e an√°lise de dados.

![](img/twit.png)

<https://towardsdatascience.com/javascript-for-data-analysis-2e8e7dbf63a7>

# Observable Javascript üìä  {background-color="#40666e"}

Uma linguagem dedicada √† visualiza√ß√£o de dados para a Web

## O que √© o Observable?

**Observable javascript (ojs)** √© um conjunto de melhorias ao JavaScript criado por Mike Bostock (tamb√©m autor do D3).
O Observable JS destaca-se pela sua execu√ß√£o reactiva, que √© particularmente adequada para a explora√ß√£o e an√°lise interactiva de dados.
O objetivo √© fazer com que uma comunidade trabalhe em conjunto em torno da visualiza√ß√£o de dados.

![](img/observable-timeline.png)

**Observable** √© tamb√©m uma start-up fundada por Mike Bostock e Melody Meckfessel, que oferece uma plataforma 100% online para conceber, partilhar e distribuir visualiza√ß√µes de dados.

![](img/observable-logo.png){width="50"}

√â tamb√©m uma **plataforma Web** dispon√≠vel em <https://observablehq.com/> que aloja ***cadernos de notas computacionais*** sobre visualiza√ß√£o de dados.

Os cadernos de notas s√£o como publica√ß√µes em blogues.
Cont√™m texto, imagens e conte√∫dos multim√©dia.
Podem ser organizados em colec√ß√µes.
Est√£o dispon√≠veis em linha atrav√©s de um URL.
Como seria de esperar, tamb√©m cont√™m linhas de c√≥digo.
O objetivo: programa√ß√£o letrada (**literate programming**).

![](img/observable-samples.png)

### Refer√™ncias

-   Reactive, reproducible, collaborative: computational notebooks evolve, par Jeffrey M. Perkel.
    https://www.nature.com/articles/d41586-021-01174-w

-   Javascript for data Analysis, par Mike Bostock https://towardsdatascience.com/javascript-for-data-analysis-2e8e7dbf63a7

## Observable notebooks

Cadernos de notas observ√°veis Os blocos de notas observ√°veis permitem-lhe trabalhar em linha, diretamente no seu navegador, sem necessidade de instalar qualquer software.
Naturalmente, √© necess√°ria uma boa liga√ß√£o √† Internet.

![](img/notebooks.png)

Por exemplo : [https://observablehq.com/trending](https://observablehq.com/trendings)

## Observable framework

Este ano, a Observable lan√ßou uma nova ferramenta designada por Observable Framework.

![](img/observable-framework.png)

## Observable em Quarto

![](img/quarto-logo.png){width="20%"}

Quarto √© um ecosistema de publica√ß√£o que pode ser utilizado para criar documentos markdown, artigos, relat√≥rios, apresenta√ß√µes, s√≠tios Web, blogues e livros em HTML, PDF, Word, ePub e outros formatos.

Permite-lhe criar conte√∫dos din√¢micos em diferentes linguagens: **Python**, **R**, **Julia** e **Observable JavaScript**.

Isto torna poss√≠vel criar documentos, relat√≥rios e an√°lises totalmente reproduz√≠veis.

![](img/quarto-exemplo.png)

## JavaScript ‚â† ojs

::: columns
::: {.column width="40%"}
OJS √© JavaScript + muitas bibliotecas pr√©-carregadas:

| **Symbol** | **Name**          | **Version**   |
|:-----------|:------------------|:--------------|
| \_         | Lodash            | 4.17.21       |
| aq         | Arquero           | 4.8.8         |
| Arrow      | Apache Arrow      | 4.0.1         |
| d3         | D3.js             | 7.8.5         |
| dot        | Graphviz          | 0.2.1         |
| htl        | Hypertext Literal | 0.3.1         |
| Inputs     | Observable Inputs | 0.10.6        |
| L          | Leaflet           | 1.9.3         |
| mermaid    | Mermaid           | 9.1.6         |
| Plot       | Observable Plot   | 0.6.11        |
| SQLite     | SQL.js            | 1.7.0         |
| topojson   | TopoJSON Client   | 3.1.0         |
| vl         | Vega, Vega-Lite   | 5.22.1, 5.2.0 |
:::

::: {.column width="60%"}
O OJS √© tamb√©m uma evolu√ß√£o da linguagem javascript para a tornar adequada √† an√°lise e apresenta√ß√£o de dados na Web.

![](img/ojs-libraries.png)
:::
:::

## As c√©lulas / chunk {ojs}

Em Quarto, √© poss√≠vel escrever/executar c√≥digo Observ√°vel usando {ojs} chunks.

Cada linha define uma vari√°vel e uma c√©lula que deve ser √∫nica.

c√©lula 1 :

``` javascript
a = 5
```

c√©lula 2 :

``` javascript
b = 7
```

c√©lula 3 :

``` javascript
a + b
```

```         
12
```

Com o **ojs**, a ordem de escrita n√£o importa ü§î Por isso, podemos escrever :

Isto :

``` javascript
c * d
```

``` javascript
24
```

Antes disso

``` javascript
c = 3
```

e isso

``` javascript
d = 8
```

A raz√£o √© que a rela√ß√£o entre as c√©lulas √© topol√≥gica.

![](img/ojs-topology.png)

Cada c√©lula deve ser √∫nica.
Por conseguinte, n√£o √© permitido redefinir nenhuma destas vari√°veis.

``` java
e = 10
e = 5
```

::: {.callout-important appearance="simple"}
OJS Runtime Error

e is defined more than once
:::

::: {.callout-important appearance="simple"}
OJS Runtime Error

e is defined more than once
:::

Por conseguinte, √© frequentemente √∫til criar blocos de c√≥digo com `{...}` quando o processamento se torna mais complexo.

``` javascript
{
  let val1 = 8;
  let val2 = 7;
  val1 = 5;
  return val1 * val2;
}
```

``` shell
35
```

Mas, na maioria das vezes, para fazer este tipo de c√°lculo, escrevemos fun√ß√µes.
Assim:

``` javascript
function sum(a, b) {
  return a + b;
}
// chamada da fun√ß√£o
sum(10, 30)
```

``` javascript
40
```

Ou desta forma :

``` javascript
multi = (a, b) => a * b
// Chamada √† fun√ß√£o
multi(3, 8)
```

``` javscript
24
```

Esta abordagem pode ser desconcertante.
Mas tem uma grande vantagem.
Permite-lhe organizar um documento independentemente da forma como o codifica.
Por exemplo, pode colocar um mapa no topo da p√°gina e o c√≥digo que o gera num ap√™ndice t√©cnico na parte inferior.

## Inputs / Entradas

**Observable** fornece *inputs* prontos a utilizar.

### üëâ button

``` javascript
viewof clicks = Inputs.button("Click")
clicks
```

```{ojs}
viewof clicks = Inputs.button("Click")
clicks
```

### üëâ toogle

``` javascript
viewof mute = Inputs.toggle({label: "Mute", value: true})
mute
```

```{ojs}
viewof mute = Inputs.toggle({label: "Mute", value: true})
mute
```

### üëâ range

``` javascript
viewof gain = Inputs.range([0, 11], {value: 5, step: 0.1, label: "Gain"})
gain
```

```{ojs}
viewof gain = Inputs.range([0, 11], {value: 5, step: 0.1, label: "Gain"})
gain
```

### üëâ checkbox

``` javascript
viewof colors = Inputs.checkbox(["red", "green", "blue"], {label: "color"})
colors
```

```{ojs}
viewof colors = Inputs.checkbox(["red", "green", "blue"], {label: "color"})
colors
```

### üëâ radio

``` javascript
viewof color = Inputs.radio(["red", "green", "blue"], {label: "color"})
color
```

```{ojs}
viewof color = Inputs.radio(["red", "green", "blue"], {label: "color"})
color
```

### üëâ select

``` javascript
cidades = ["Coimbra", "Faro", "Braga"]
viewof minhacidade = Inputs.select(cidades, {value: "steelblue", label: "Escolhe uma cidade"})
minhacidade
```

```{ojs}
cidades = ["Coimbra", "Faro", "Braga"]
viewof minhacidade = Inputs.select(cidades, {value: "steelblue", label: "Escolhe uma cidade"})
minhacidade
```

### üëâ text

``` javascript
viewof text = Inputs.text()
text
```

```{ojs}
viewof text = Inputs.text()
text
```

### üëâ textarea

``` javascript
viewof textarea = Inputs.textarea()
textarea
```

```{ojs}
viewof textarea = Inputs.textarea()
textarea
```

### üëâ date

``` javascript
viewof date = Inputs.date()
date
```

```{ojs}
viewof date = Inputs.date()
date
```

### üëâ color

``` javascript
viewof pickcolor = Inputs.color({label: "cor preferida", value: "#4682b4"})
pickcolor
```

```{ojs}
viewof pickcolor = Inputs.color({label: "cor preferida", value: "#4682b4"})
pickcolor
```

### üëâ file

``` javascript
viewof file = Inputs.file()
file
```

```{ojs}
viewof file = Inputs.file()
file
```

### üëâ formul√°rio

## Tudo √© reativo üî•

Com Observable, gra√ßas √† rela√ß√£o topol√≥gica entre as c√©lulas, tudo √© reativo.
Sempre que se move algo, tudo o que depende desse movimento √© reexecutado.

``` javascript
viewof age = Inputs.range([15, 70], {label: "age", value: 30, step: 1,})
viewof name = Inputs.text({label: "name", value: "Jo√£o"})
```

```{ojs}
viewof age = Inputs.range([15, 70], {label: "age", value: 30, step: 1,})
viewof name = Inputs.text({label: "name", value: "Jo√£o"})
```

Por exemplo

``` javascript
md`O meu nome √© **${name}** e tenho **${age}** anos :-)`
```

```{ojs}
md`O meu nome √© **${name}** e tenho **${age}** anos :-)`
```

Voltamos ao exemplo SVG de h√° pouco:

``` javascript
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, 500, 60])
    .style("background-color", "#CCC");
    
  svg
    .append("circle")
    .attr("cx", 50)
    .attr("cy", 30)
    .attr("r", 25)
    .style("fill", "#e04a28");
    
  return svg.node();
}
```

```{ojs}
{
  const svg = d3
    .create("svg")
    .attr("viewBox", [0, 0, 500, 60])
    .style("background-color", "#CCC");
    
  svg
    .append("circle")
    .attr("cx", 50)
    .attr("cy", 30)
    .attr("r", 25)
    .style("fill", "#e04a28");
    
  return svg.node();
}
```

O utilizador poderia facilmente modificar o desenho, substituindo valores por vari√°veis controladas por entradas.
Por exemplo:

``` javascript
viewof cx = Inputs.range([30, 470], {value: 50, step: 1, label: "posicao"})
viewof col = Inputs.color({ value: "#e04a28", label: "cor"})
viewof r = Inputs.range([5, 30], {value: 25, step: 0.1, label: "raio"})
```

```{ojs}
viewof cx = Inputs.range([30, 470], {value: 50, step: 1, label: "posicao"})
viewof col = Inputs.color({ value: "#e04a28", label: "cor"})
viewof r = Inputs.range([5, 30], {value: 25, step: 0.1, label: "raio"})
```

## Os dados

Os dados s√£o adicionados utilizando a instru√ß√£o `FileAttachment()`

### üëâ ficheiro csv

``` javascript
data1 = FileAttachment("data/afrika_data.csv").csv()
```

```{ojs}
data1 = FileAttachment("data/afrika_data.csv").csv()
```

Os dados s√£o importados e convertidos automaticamente para o formato json

```{ojs}
data1
```

Para os visualizar, utilize-se a instru√ß√£o `Inputs.table()`

``` javascript
Inputs.table(data1)
```

```{ojs}
Inputs.table(data1)
```

### üëâ ficheiro xlsx

Tamb√©m √© poss√≠vel importar ficheiros Excel

``` javascript
classeur = FileAttachment("data/afrika.xlsx").xlsx()
```

```{ojs}
classeur = FileAttachment("data/afrika.xlsx").xlsx()
```

```{ojs}
classeur
```

Temos acesso √† lista das folhas assim:

``` javascript
classeur.sheetNames
```

```{ojs}
classeur.sheetNames
```

Depois, podemos escolher a folha a abrir

``` javascript
data2 = classeur.sheet("data", {
  headers: true
})
```

```{ojs}
data2 = classeur.sheet("data", {
  headers: true
})
```

```{ojs}
data2
```

### üëâ Apresenta√ß√£o dos dados

Os dados podem ser formatados utilizando JavaScript puro.

``` javascript
subdata1 = data1
  .filter((d) => +d.ESPVIE > 65)
  .map((d) => ({ code: d.iso3, nom: d.nom, POP: d.POP, PIB: d.PIB, ESPVIE: d.ESPVIE }))
  .sort((a, b) => d3.descending(b.ESPVIE, a.ESPVIE))
```

O resultado √© o seguinte:

```{ojs}
subdata1 = data1
  .filter((d) => +d.ESPVIE > 65)
  .map((d) => ({ code: d.iso3, nom: d.nom, POP: d.POP, PIB: d.PIB, ESPVIE: d.ESPVIE }))
  .sort((a, b) => d3.descending(b.ESPVIE, a.ESPVIE))
```

```{ojs}
subdata1
```

Pode-se tamb√©m utilizar `arquero`.
Ver : [https://observablehq.com/\@observablehq/data-wrangler](https://observablehq.com/@observablehq/data-wrangler).

``` javascript
subdata2 = aq
  .from(data1)
  .filter((d) => d["ESPVIE"] > 65)
  .rename({ iso3: "code" })
  .select("code", "nom", "POP", "PIB", "ESPVIE")
  .orderby("ESPVIE")
  .objects()
```

```{ojs}
subdata2 = aq
  .from(data1)
  .filter((d) => d["ESPVIE"] > 65)
  .rename({ iso3: "code" })
  .select("code", "nom", "POP", "PIB", "ESPVIE")
  .orderby("ESPVIE")
  .objects()
```

O resultado √© o mesmo:

```{ojs}
subdata2
```

### üëâ ficheiro geoJSON

Para utilizar geometrias, deve ser utilizado prioritariamente o formato geoJSON.

``` javascript
basemap = FileAttachment("data/africa.json").json()
```

```{ojs}
basemap = FileAttachment("data/africa.json").json()
```

```{ojs}
basemap
```

Aqui est√° a estrutura de um geoJSON

``` javascript
Object {type: "FeatureCollection", name: "world", features: Array(50)}
```

E eis o que aparece se o mostrarmos (veremos como mais tarde...)

## Bibliotecas externas

O javascript observ√°vel n√£o √© um ecossistema fechado.
Existem milh√µes de bibliotecas javascript no NPM (o equivalente ao CRAN para o R).
√â poss√≠vel us√°-las.

![](img/npm-cli.png)

Aqui, podemos import√°-los diretamente utilizando a instru√ß√£o `require()`

``` javascript
geo = require("geotoolbox")
```

```{ojs}
geo = require("geotoolbox")
```

Generaliza√ß√£o de mapas

``` javascript
viewof k = Inputs.range([0.01, 0.5], { label: "k", step: 0.01, value: 0.05 })
geo.simplify(world, { k })
```

```{ojs}
viewof k = Inputs.range([0.01, 0.5], { label: "k", step: 0.01, value: 0.05 })
geo.simplify(world, { k })
```

## Importa√ß√µes

Como dissemos anteriormente, o Observable √© tamb√©m uma plataforma web que aloja blocos de notas.

![](img/observable-maps.png)

Se tiver uma liga√ß√£o √† Internet, pode importar qualquer c√©lula de qualquer caderno utilizando a fun√ß√£o `import`.
Por outras palavras, todos os blocos de notas alojados em *observablehq.com* funcionam como api.

``` javascript
import {SankeyChart} from "@d3/sankey"
import {energy} from "@d3/sankey"
```

```{ojs}
import {SankeyChart} from "@d3/sankey"
import {energy} from "@d3/sankey"
```

A seguir, pode-se utilizar esta fun√ß√£o.

``` javascript
chart = SankeyChart({
  links: energy
}, {
  nodeGroup: d => d.id.split(/\W/)[0], // take first word for color
  width,
  height: 600
})
```

```{ojs}
chart = SankeyChart({
  links: energy
}, {
  nodeGroup: d => d.id.split(/\W/)[0], // take first word for color
  width,
  height: 600
})
```

# Trabalhos pr√°ticos üëâ let‚Äôs go  {background-color="#40666e"}
